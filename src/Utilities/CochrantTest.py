import numpy as np
from scipy.interpolate import interp1d
import mathUtils as math

#------------------------------------------------------------------------------------------------#
#----------------------------- Util functions for couchran test ---------------------------------#
#------------------------------------------------------------------------------------------------#

COCHRAN_TABLE = {
    1: {
        2: 0.9985,
        3: 0.9669,
        4: 0.9065,
        5: 0.8412,
        6: 0.7808,
        7: 0.7271,
        8: 0.6798,
        9: 0.6385,
        10: 0.6020,
        12: 0.5410,
        15: 0.4709,
        20: 0.3894,
        24: 0.3434,
        30: 0.2929,
        40: 0.2370,
        60: 0.1737,
        120: 0.0998,
        999: 0
    },
    2: {
        2: 0.9750,
        3: 0.8709,
        4: 0.7679,
        5: 0.6838,
        6: 0.6161,
        7: 0.5612,
        8: 0.5157,
        9: 0.4775,
        10: 0.4450,
        12: 0.3924,
        15: 0.3346,
        20: 0.2705,
        24: 0.2354,
        30: 0.1980,
        40: 0.1576,
        60: 0.1131,
        120: 0.0632,
        999: 0
    },
    3: {
        2: 0.9392,
        3: 0.7977,
        4: 0.6841,
        5: 0.5981,
        6: 0.5321,
        7: 0.4800,
        8: 0.4377,
        9: 0.4027,
        10: 0.3733,
        12: 0.3264,
        15: 0.2758,
        20: 0.2205,
        24: 0.1907,
        30: 0.1593,
        40: 0.1259,
        60: 0.0895,
        120: 0.0495,
        999: 0
    },
    4: {
        2: 0.9057,
        3: 0.7457,
        4: 0.6287,
        5: 0.5441,
        6: 0.4803,
        7: 0.4307,
        8: 0.3910,
        9: 0.3584,
        10: 0.3311,
        12: 0.2880,
        15: 0.2419,
        20: 0.1921,
        24: 0.1656,
        30: 0.1377,
        40: 0.1082,
        60: 0.0765,
        120: 0.0419,
        999: 0
    },
    5: {
        2: 0.8772,
        3: 0.7071,
        4: 0.5895,
        5: 0.5065,
        6: 0.4447,
        7: 0.3974,
        8: 0.3595,
        9: 0.3286,
        10: 0.3029,
        12: 0.2624,
        15: 0.2195,
        20: 0.1735,
        24: 0.1493,
        30: 0.1237,
        40: 0.0968,
        60: 0.0682,
        120: 0.0371,
        999: 0
    },
    6: {
        2: 0.8534,
        3: 0.6771,
        4: 0.5598,
        5: 0.4783,
        6: 0.4184,
        7: 0.3726,
        8: 0.3362,
        9: 0.3067,
        10: 0.2823,
        12: 0.2439,
        15: 0.2034,
        20: 0.1602,
        24: 0.1374,
        30: 0.1137,
        40: 0.0887,
        60: 0.0623,
        120: 0.0337,
        999: 0
    },
    7: {
        2: 0.8332,
        3: 0.6530,
        4: 0.5365,
        5: 0.4564,
        6: 0.3980,
        7: 0.3535,
        8: 0.3185,
        9: 0.2901,
        10: 0.2666,
        12: 0.2299,
        15: 0.1911,
        20: 0.1501,
        24: 0.1286,
        30: 0.1061,
        40: 0.0827,
        60: 0.0583,
        120: 0.0312,
    999: 0
    },
    8: {
        2: 0.8159,
        3: 0.6333,
        4: 0.5175,
        5: 0.4387,
        6: 0.3817,
        7: 0.3384,
        8: 0.3043,
        9: 0.2768,
        10: 0.2541,
        12: 0.2187,
        15: 0.1815,
        20: 0.1422,
        24: 0.1216,
        30: 0.1002,
        40: 0.0780,
        60: 0.0552,
        120: 0.0292,
        999: 0
    },
    9: {
        2: 0.8010,
        3: 0.6167,
        4: 0.5017,
        5: 0.4241,
        6: 0.3682,
        7: 0.3259,
        8: 0.2926,
        9: 0.2659,
        10: 0.2439,
        12: 0.2098,
        15: 0.1736,
        20: 0.1357,
        24: 0.1160,
        30: 0.0958,
        40: 0.0745,
        60: 0.0520,
        120: 0.0279,
        999: 0
    },
    10: {
        2: 0.7880,
        3: 0.6025,
        4: 0.4884,
        5: 0.4118,
        6: 0.3568,
        7: 0.3154,
        8: 0.2829,
        9: 0.2568,
        10: 0.2353,
        12: 0.2020,
        15: 0.1671,
        20: 0.1303,
        24: 0.1113,
        30: 0.0921,
        40: 0.0713,
        60: 0.0497,
        120: 0.0266,
        999: 0
    },
    16: {
        2: 0.7341,
        3: 0.5466,
        4: 0.4366,
        5: 0.3645,
        6: 0.3135,
        7: 0.2756,
        8: 0.2462,
        9: 0.2226,
        10: 0.2032,
        12: 0.1737,
        15: 0.1429,
        20: 0.1108,
        24: 0.0942,
        30: 0.0771,
        40: 0.0595,
        60: 0.0411,
        120: 0.0218,
        999: 0
    },
    36: {
        2: 0.6602,
        3: 0.4748,
        4: 0.3720,
        5: 0.3066,
        6: 0.2612,
        7: 0.2278,
        8: 0.2022,
        9: 0.1820,
        10: 0.1655,
        12: 0.1403,
        15: 0.1144,
        20: 0.0879,
        24: 0.0743,
        30: 0.0604,
        40: 0.0462,
        60: 0.0316,
        120: 0.0165,
        999: 0
    },
    144: {
        2: 0.5813,
        3: 0.4031,
        4: 0.3093,
        5: 0.2513,
        6: 0.2119,
        7: 0.1833,
        8: 0.1616,
        9: 0.1446,
        10: 0.1308,
        12: 0.1100,
        15: 0.0889,
        20: 0.0675,
        24: 0.0567,
        30: 0.0457,
        40: 0.0347,
        60: 0.0234,
        120: 0.0120,
        999: 0
    },
    999: {
        2: 0.5000,
        3: 0.3333,
        4: 0.2500,
        5: 0.2000,
        6: 0.1667,
        7: 0.1429,
        8: 0.1250,
        9: 0.1111,
        10: 0.1000,
        12: 0.0833,
        15: 0.0667,
        20: 0.0500,
        24: 0.0417,
        30: 0.0333,
        40: 0.0250,
        60: 0.0167,
        120: 0.0083,
        999: 0
    }
}

def cochranCV(alpha, df, dfn):
    if(alpha!=0.05):
        return None
    if(dfn in COCHRAN_TABLE.keys()):
        if(df in COCHRAN_TABLE[dfn].keys()):
            return round(COCHRAN_TABLE[dfn][df],2)
        else:
            x = COCHRAN_TABLE[dfn].keys()
            y = COCHRAN_TABLE[dfn].values()
            interp_func =  interp1d(x, y, kind=('quadratic' if df <= 120 else 'slinear'))
            return round(interp_func(df),2)
    else:
        x = COCHRAN_TABLE.keys()
        y = [cochranCV(alpha, df, key) for key in x]
        interp_func =  interp1d(x, y, kind=('quadratic' if df <= 120 else 'slinear'))
        return round(interp_func(df),2)
    
def calculateCouchran(n, S2j):
    maxS2 = max(S2j)
    return round(maxS2/sum(S2j),2)

#------------------------------------------------------------------------------------------------#
#--------------------------------- Implementing couchran test -----------------------------------#
#------------------------------------------------------------------------------------------------#

n = 5
m = 3
b = 798.528273
a = -1345.52
corelation = 0.9998

x = np.array([[0.0]*m]*n)
y = np.array([[0.0]*m]*n)

xy = [
    [[96.5, 76626.0], [96.8, 75154.0], [96.7, 76049.0]], 
    [[130.0, 103197.0], [129.8, 101786.0], [129.7, 101858.0]], 
    [[161.8, 128105.0], [161.5, 126865.0], [161.2, 127788.0]], 
    [[195.5, 155967.0], [195.3, 153848.0], [195.3, 153608.0]], 
    [[227.8, 181879.0], [228.6, 180355.0], [228.2, 180909.0]]
]

for j in range(n):
    for i in range(m):
        x[j][i] = xy[j][i][0] 
        y[j][i] = xy[j][i][1] 
    
Xbars = math.calculateXbars(n, m, x)
Yij = math.calculateYij(n, m, b, x, y, Xbars)
S2j = math.calculateS2j(n, m, Yij)
calculatedCouchran = calculateCouchran(n, S2j)
print(calculatedCouchran)
print(cochranCV(0.05,n,m-1))